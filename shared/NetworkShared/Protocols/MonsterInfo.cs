// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MonsterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb) { return GetRootAsMonsterInfo(_bb, new MonsterInfo()); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb, MonsterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double Test { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<MonsterInfo> CreateMonsterInfo(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int level = 0,
      double test = 0.0) {
    builder.StartTable(3);
    MonsterInfo.AddTest(builder, test);
    MonsterInfo.AddLevel(builder, level);
    MonsterInfo.AddName(builder, nameOffset);
    return MonsterInfo.EndMonsterInfo(builder);
  }

  public static void StartMonsterInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(1, level, 0); }
  public static void AddTest(FlatBufferBuilder builder, double test) { builder.AddDouble(2, test, 0.0); }
  public static Offset<MonsterInfo> EndMonsterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MonsterInfo>(o);
  }
  public static void FinishMonsterInfoBuffer(FlatBufferBuilder builder, Offset<MonsterInfo> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMonsterInfoBuffer(FlatBufferBuilder builder, Offset<MonsterInfo> offset) { builder.FinishSizePrefixed(offset.Value); }

  public static byte[] Bytes(string name, int level, double test) {
    var builder = new FlatBufferBuilder(512);
    var nameOffset = builder.CreateString(name);
    var offset = MonsterInfo.CreateMonsterInfo(builder, nameOffset, level, test);
    builder.Finish(offset.Value);
    return builder.DataBuffer.ToSizedArray();
  }
};

