using System.Linq;
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Stop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Stop GetRootAsStop(ByteBuffer _bb) { return GetRootAsStop(_bb, new Stop()); }
  public static Stop GetRootAsStop(ByteBuffer _bb, Stop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Stop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long Now { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Stop> CreateStop(FlatBufferBuilder builder,
      int x = 0,
      int y = 0,
      long now = 0) {
    builder.StartTable(3);
    Stop.AddNow(builder, now);
    Stop.AddY(builder, y);
    Stop.AddX(builder, x);
    return Stop.EndStop(builder);
  }

  public static void StartStop(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(0, x, 0); }
  public static void AddY(FlatBufferBuilder builder, int y) { builder.AddInt(1, y, 0); }
  public static void AddNow(FlatBufferBuilder builder, long now) { builder.AddLong(2, now, 0); }
  public static Offset<Stop> EndStop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Stop>(o);
  }

  public static byte[] Bytes(int x, int y, long now) {
    var builder = new FlatBufferBuilder(512);
  
    var offset = Stop.CreateStop(builder, x, y, now);
    builder.Finish(offset.Value);
    return builder.DataBuffer.ToSizedArray();
  }
};

