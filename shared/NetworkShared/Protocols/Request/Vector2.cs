// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Request
{
  public struct Vector2 : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Vector2 GetRootAsVector2(ByteBuffer _bb) { return GetRootAsVector2(_bb, new Vector2()); }
    public static Vector2 GetRootAsVector2(ByteBuffer _bb, Vector2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Vector2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public double X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
    public double Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  
    public static Offset<Vector2> CreateVector2(FlatBufferBuilder builder,
        double x = 0.0,
        double y = 0.0) {
      builder.StartTable(2);
      Vector2.AddY(builder, y);
      Vector2.AddX(builder, x);
      return Vector2.EndVector2(builder);
    }
  
    public static void StartVector2(FlatBufferBuilder builder) { builder.StartTable(2); }
    public static void AddX(FlatBufferBuilder builder, double x) { builder.AddDouble(0, x, 0.0); }
    public static void AddY(FlatBufferBuilder builder, double y) { builder.AddDouble(1, y, 0.0); }
    public static Offset<Vector2> EndVector2(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Vector2>(o);
    }
  
    public struct Model
    {
      public double X { get; set; }
      public double Y { get; set; }
    
      public Model(double x, double y)
      {
        X = x;
        Y = y;
      }
    }
  
    public static byte[] Bytes(double x, double y) {
      var builder = new FlatBufferBuilder(512);
    
      var offset = Vector2.CreateVector2(builder, x, y);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Vector2).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Vector2).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.X, model.Y);
    }
  };
}