// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Request
{
  public struct Jump : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Jump GetRootAsJump(ByteBuffer _bb) { return GetRootAsJump(_bb, new Jump()); }
    public static Jump GetRootAsJump(ByteBuffer _bb, Jump obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Jump __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public Vector2? Position { get { int o = __p.__offset(4); return o != 0 ? (Vector2?)(new Vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  
    public static Offset<Jump> CreateJump(FlatBufferBuilder builder,
        Offset<Vector2> positionOffset = default(Offset<Vector2>)) {
      builder.StartTable(1);
      Jump.AddPosition(builder, positionOffset);
      return Jump.EndJump(builder);
    }
  
    public static void StartJump(FlatBufferBuilder builder) { builder.StartTable(1); }
    public static void AddPosition(FlatBufferBuilder builder, Offset<Vector2> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
    public static Offset<Jump> EndJump(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Jump>(o);
    }
  
    public struct Model
    {
      public FlatBuffers.Protocol.Request.Vector2.Model Position { get; set; }
    
      public Model(FlatBuffers.Protocol.Request.Vector2.Model position)
      {
        Position = position;
      }
    }
  
    public static byte[] Bytes(FlatBuffers.Protocol.Request.Vector2.Model position) {
      var builder = new FlatBufferBuilder(512);
      var positionOffset = FlatBuffers.Protocol.Request.Vector2.CreateVector2(builder, position.X, position.Y);
      var offset = Jump.CreateJump(builder, positionOffset);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Jump).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Jump).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Position);
    }
  };
}