// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol
{
  public struct Equipment : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Equipment GetRootAsEquipment(ByteBuffer _bb) { return GetRootAsEquipment(_bb, new Equipment()); }
    public static Equipment GetRootAsEquipment(ByteBuffer _bb, Equipment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Equipment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public int Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public string Weapon { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetWeaponBytes() { return __p.__vector_as_span<byte>(6, 1); }
  #else
    public ArraySegment<byte>? GetWeaponBytes() { return __p.__vector_as_arraysegment(6); }
  #endif
    public byte[] GetWeaponArray() { return __p.__vector_as_array<byte>(6); }
    public string Armor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetArmorBytes() { return __p.__vector_as_span<byte>(8, 1); }
  #else
    public ArraySegment<byte>? GetArmorBytes() { return __p.__vector_as_arraysegment(8); }
  #endif
    public byte[] GetArmorArray() { return __p.__vector_as_array<byte>(8); }
    public string Shoes { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetShoesBytes() { return __p.__vector_as_span<byte>(10, 1); }
  #else
    public ArraySegment<byte>? GetShoesBytes() { return __p.__vector_as_arraysegment(10); }
  #endif
    public byte[] GetShoesArray() { return __p.__vector_as_array<byte>(10); }
    public string Helmet { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetHelmetBytes() { return __p.__vector_as_span<byte>(12, 1); }
  #else
    public ArraySegment<byte>? GetHelmetBytes() { return __p.__vector_as_arraysegment(12); }
  #endif
    public byte[] GetHelmetArray() { return __p.__vector_as_array<byte>(12); }
    public string Shield { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetShieldBytes() { return __p.__vector_as_span<byte>(14, 1); }
  #else
    public ArraySegment<byte>? GetShieldBytes() { return __p.__vector_as_arraysegment(14); }
  #endif
    public byte[] GetShieldArray() { return __p.__vector_as_array<byte>(14); }
  
    public static Offset<Equipment> CreateEquipment(FlatBufferBuilder builder,
        int sequence = 0,
        StringOffset weaponOffset = default(StringOffset),
        StringOffset armorOffset = default(StringOffset),
        StringOffset shoesOffset = default(StringOffset),
        StringOffset helmetOffset = default(StringOffset),
        StringOffset shieldOffset = default(StringOffset)) {
      builder.StartTable(6);
      Equipment.AddShield(builder, shieldOffset);
      Equipment.AddHelmet(builder, helmetOffset);
      Equipment.AddShoes(builder, shoesOffset);
      Equipment.AddArmor(builder, armorOffset);
      Equipment.AddWeapon(builder, weaponOffset);
      Equipment.AddSequence(builder, sequence);
      return Equipment.EndEquipment(builder);
    }
  
    public static void StartEquipment(FlatBufferBuilder builder) { builder.StartTable(6); }
    public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(0, sequence, 0); }
    public static void AddWeapon(FlatBufferBuilder builder, StringOffset weaponOffset) { builder.AddOffset(1, weaponOffset.Value, 0); }
    public static void AddArmor(FlatBufferBuilder builder, StringOffset armorOffset) { builder.AddOffset(2, armorOffset.Value, 0); }
    public static void AddShoes(FlatBufferBuilder builder, StringOffset shoesOffset) { builder.AddOffset(3, shoesOffset.Value, 0); }
    public static void AddHelmet(FlatBufferBuilder builder, StringOffset helmetOffset) { builder.AddOffset(4, helmetOffset.Value, 0); }
    public static void AddShield(FlatBufferBuilder builder, StringOffset shieldOffset) { builder.AddOffset(5, shieldOffset.Value, 0); }
    public static Offset<Equipment> EndEquipment(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Equipment>(o);
    }
  
    public struct Model
    {
      public int Sequence { get; set; }
      public string Weapon { get; set; }
      public string Armor { get; set; }
      public string Shoes { get; set; }
      public string Helmet { get; set; }
      public string Shield { get; set; }
    
      public Model(int sequence, string weapon, string armor, string shoes, string helmet, string shield)
      {
        Sequence = sequence;
        Weapon = weapon;
        Armor = armor;
        Shoes = shoes;
        Helmet = helmet;
        Shield = shield;
      }
    }
  
    public static byte[] Bytes(int sequence, string weapon, string armor, string shoes, string helmet, string shield) {
      var builder = new FlatBufferBuilder(512);
      var weaponOffset = builder.CreateString(weapon);
      var armorOffset = builder.CreateString(armor);
      var shoesOffset = builder.CreateString(shoes);
      var helmetOffset = builder.CreateString(helmet);
      var shieldOffset = builder.CreateString(shield);
      var offset = Equipment.CreateEquipment(builder, sequence, weaponOffset, armorOffset, shoesOffset, helmetOffset, shieldOffset);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(nameof(Equipment).Length));
          writer.Write(Encoding.Default.GetBytes(nameof(Equipment)));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
  };
}