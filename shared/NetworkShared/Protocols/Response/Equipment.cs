// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct Equipment : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Equipment GetRootAsEquipment(ByteBuffer _bb) { return GetRootAsEquipment(_bb, new Equipment()); }
    public static Equipment GetRootAsEquipment(ByteBuffer _bb, Equipment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Equipment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public ulong Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
    public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
  #else
    public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  #endif
    public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
    public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  
    public static Offset<Equipment> CreateEquipment(FlatBufferBuilder builder,
        ulong id = 0,
        StringOffset nameOffset = default(StringOffset),
        int type = 0) {
      builder.StartTable(3);
      Equipment.AddId(builder, id);
      Equipment.AddType(builder, type);
      Equipment.AddName(builder, nameOffset);
      return Equipment.EndEquipment(builder);
    }
  
    public static void StartEquipment(FlatBufferBuilder builder) { builder.StartTable(3); }
    public static void AddId(FlatBufferBuilder builder, ulong id) { builder.AddUlong(0, id, 0); }
    public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
    public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 0); }
    public static Offset<Equipment> EndEquipment(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Equipment>(o);
    }
  
    public struct Model
    {
      public ulong Id { get; set; }
      public string Name { get; set; }
      public int Type { get; set; }
    
      public Model(ulong id, string name, int type)
      {
        Id = id;
        Name = name;
        Type = type;
      }
    }
  
    public static byte[] Bytes(ulong id, string name, int type) {
      var builder = new FlatBufferBuilder(512);
      var nameOffset = builder.CreateString(name);
      var offset = Equipment.CreateEquipment(builder, id, nameOffset, type);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Equipment).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Equipment).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Id, model.Name, model.Type);
    }
  };
}