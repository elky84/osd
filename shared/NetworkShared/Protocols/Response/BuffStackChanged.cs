// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct BuffStackChanged : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static BuffStackChanged GetRootAsBuffStackChanged(ByteBuffer _bb) { return GetRootAsBuffStackChanged(_bb, new BuffStackChanged()); }
    public static BuffStackChanged GetRootAsBuffStackChanged(ByteBuffer _bb, BuffStackChanged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public BuffStackChanged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
  #else
    public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
  #endif
    public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
    public int Stack { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  
    public static Offset<BuffStackChanged> CreateBuffStackChanged(FlatBufferBuilder builder,
        StringOffset idOffset = default(StringOffset),
        int stack = 0) {
      builder.StartTable(2);
      BuffStackChanged.AddStack(builder, stack);
      BuffStackChanged.AddId(builder, idOffset);
      return BuffStackChanged.EndBuffStackChanged(builder);
    }
  
    public static void StartBuffStackChanged(FlatBufferBuilder builder) { builder.StartTable(2); }
    public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
    public static void AddStack(FlatBufferBuilder builder, int stack) { builder.AddInt(1, stack, 0); }
    public static Offset<BuffStackChanged> EndBuffStackChanged(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<BuffStackChanged>(o);
    }
  
    public struct Model
    {
      public string Id { get; set; }
      public int Stack { get; set; }
    
      public Model(string id, int stack)
      {
        Id = id;
        Stack = stack;
      }
    }
  
    public static byte[] Bytes(string id, int stack) {
      var builder = new FlatBufferBuilder(512);
      var idOffset = builder.CreateString(id);
      var offset = BuffStackChanged.CreateBuffStackChanged(builder, idOffset, stack);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(BuffStackChanged).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(BuffStackChanged).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Id, model.Stack);
    }
  };
}