// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct Items : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Items GetRootAsItems(ByteBuffer _bb) { return GetRootAsItems(_bb, new Items()); }
    public static Items GetRootAsItems(ByteBuffer _bb, Items obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Items __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public Item? Inventory(int j) { int o = __p.__offset(4); return o != 0 ? (Item?)(new Item()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
    public int InventoryLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
    public Equipment? Equipment(int j) { int o = __p.__offset(6); return o != 0 ? (Equipment?)(new Equipment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
    public int EquipmentLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  
    public static Offset<Items> CreateItems(FlatBufferBuilder builder,
        VectorOffset inventoryOffset = default(VectorOffset),
        VectorOffset equipmentOffset = default(VectorOffset)) {
      builder.StartTable(2);
      Items.AddEquipment(builder, equipmentOffset);
      Items.AddInventory(builder, inventoryOffset);
      return Items.EndItems(builder);
    }
  
    public static void StartItems(FlatBufferBuilder builder) { builder.StartTable(2); }
    public static void AddInventory(FlatBufferBuilder builder, VectorOffset inventoryOffset) { builder.AddOffset(0, inventoryOffset.Value, 0); }
    public static VectorOffset CreateInventoryVector(FlatBufferBuilder builder, Offset<Item>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
    public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, Offset<Item>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
    public static void StartInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
    public static void AddEquipment(FlatBufferBuilder builder, VectorOffset equipmentOffset) { builder.AddOffset(1, equipmentOffset.Value, 0); }
    public static VectorOffset CreateEquipmentVector(FlatBufferBuilder builder, Offset<Equipment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
    public static VectorOffset CreateEquipmentVectorBlock(FlatBufferBuilder builder, Offset<Equipment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
    public static void StartEquipmentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
    public static Offset<Items> EndItems(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Items>(o);
    }
  
    public struct Model
    {
      public List<FlatBuffers.Protocol.Response.Item.Model> Inventory { get; set; }
      public List<FlatBuffers.Protocol.Response.Equipment.Model> Equipment { get; set; }
    
      public Model(List<FlatBuffers.Protocol.Response.Item.Model> inventory, List<FlatBuffers.Protocol.Response.Equipment.Model> equipment)
      {
        Inventory = inventory;
        Equipment = equipment;
      }
    }
  
    public static byte[] Bytes(List<FlatBuffers.Protocol.Response.Item.Model> inventory, List<FlatBuffers.Protocol.Response.Equipment.Model> equipment) {
      var builder = new FlatBufferBuilder(512);
      var inventoryOffset = CreateInventoryVector(builder, inventory.Select(x => FlatBuffers.Protocol.Response.Item.CreateItem(builder, x.Id, builder.CreateString(x.Name))).ToArray());
      var equipmentOffset = CreateEquipmentVector(builder, equipment.Select(x => FlatBuffers.Protocol.Response.Equipment.CreateEquipment(builder, x.Id, builder.CreateString(x.Name), x.Type)).ToArray());
      var offset = Items.CreateItems(builder, inventoryOffset, equipmentOffset);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Items).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Items).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Inventory, model.Equipment);
    }
  };
}