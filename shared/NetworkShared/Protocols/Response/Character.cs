// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct Character : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Character GetRootAsCharacter(ByteBuffer _bb) { return GetRootAsCharacter(_bb, new Character()); }
    public static Character GetRootAsCharacter(ByteBuffer _bb, Character obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Character __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public int Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
  #else
    public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  #endif
    public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
    public Vector2? Position { get { int o = __p.__offset(8); return o != 0 ? (Vector2?)(new Vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public bool Moving { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
    public int Direction { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public Equipment? Equipment(int j) { int o = __p.__offset(14); return o != 0 ? (Equipment?)(new Equipment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
    public int EquipmentLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  
    public static Offset<Character> CreateCharacter(FlatBufferBuilder builder,
        int sequence = 0,
        StringOffset nameOffset = default(StringOffset),
        Offset<Vector2> positionOffset = default(Offset<Vector2>),
        bool moving = false,
        int direction = 0,
        VectorOffset equipmentOffset = default(VectorOffset)) {
      builder.StartTable(6);
      Character.AddEquipment(builder, equipmentOffset);
      Character.AddDirection(builder, direction);
      Character.AddPosition(builder, positionOffset);
      Character.AddName(builder, nameOffset);
      Character.AddSequence(builder, sequence);
      Character.AddMoving(builder, moving);
      return Character.EndCharacter(builder);
    }
  
    public static void StartCharacter(FlatBufferBuilder builder) { builder.StartTable(6); }
    public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(0, sequence, 0); }
    public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
    public static void AddPosition(FlatBufferBuilder builder, Offset<Vector2> positionOffset) { builder.AddOffset(2, positionOffset.Value, 0); }
    public static void AddMoving(FlatBufferBuilder builder, bool moving) { builder.AddBool(3, moving, false); }
    public static void AddDirection(FlatBufferBuilder builder, int direction) { builder.AddInt(4, direction, 0); }
    public static void AddEquipment(FlatBufferBuilder builder, VectorOffset equipmentOffset) { builder.AddOffset(5, equipmentOffset.Value, 0); }
    public static VectorOffset CreateEquipmentVector(FlatBufferBuilder builder, Offset<Equipment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
    public static VectorOffset CreateEquipmentVectorBlock(FlatBufferBuilder builder, Offset<Equipment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
    public static void StartEquipmentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
    public static Offset<Character> EndCharacter(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Character>(o);
    }
  
    public struct Model
    {
      public int Sequence { get; set; }
      public string Name { get; set; }
      public FlatBuffers.Protocol.Response.Vector2.Model Position { get; set; }
      public bool Moving { get; set; }
      public int Direction { get; set; }
      public List<FlatBuffers.Protocol.Response.Equipment.Model> Equipment { get; set; }
    
      public Model(int sequence, string name, FlatBuffers.Protocol.Response.Vector2.Model position, bool moving, int direction, List<FlatBuffers.Protocol.Response.Equipment.Model> equipment)
      {
        Sequence = sequence;
        Name = name;
        Position = position;
        Moving = moving;
        Direction = direction;
        Equipment = equipment;
      }
    }
  
    public static byte[] Bytes(int sequence, string name, FlatBuffers.Protocol.Response.Vector2.Model position, bool moving, int direction, List<FlatBuffers.Protocol.Response.Equipment.Model> equipment) {
      var builder = new FlatBufferBuilder(512);
      var nameOffset = builder.CreateString(name);
      var positionOffset = FlatBuffers.Protocol.Response.Vector2.CreateVector2(builder, position.X, position.Y);
      var equipmentOffset = FlatBuffers.Protocol.Response.Character.CreateEquipmentVector(builder, equipment.Select(x => FlatBuffers.Protocol.Response.Equipment.CreateEquipment(builder, x.Id, builder.CreateString(x.Name), x.Type)).ToArray());
      var offset = Character.CreateCharacter(builder, sequence, nameOffset, positionOffset, moving, direction, equipmentOffset);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Character).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Character).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Sequence, model.Name, model.Position, model.Moving, model.Direction, model.Equipment);
    }
  };
}