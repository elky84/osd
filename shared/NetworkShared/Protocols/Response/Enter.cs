// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct Enter : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Enter GetRootAsEnter(ByteBuffer _bb) { return GetRootAsEnter(_bb, new Enter()); }
    public static Enter GetRootAsEnter(ByteBuffer _bb, Enter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Enter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public Character? Character { get { int o = __p.__offset(4); return o != 0 ? (Character?)(new Character()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public Map? Map { get { int o = __p.__offset(6); return o != 0 ? (Map?)(new Map()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public Vector2? Position { get { int o = __p.__offset(8); return o != 0 ? (Vector2?)(new Vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public int Direction { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public Portal? Portals(int j) { int o = __p.__offset(12); return o != 0 ? (Portal?)(new Portal()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
    public int PortalsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  
    public static Offset<Enter> CreateEnter(FlatBufferBuilder builder,
        Offset<Character> characterOffset = default(Offset<Character>),
        Offset<Map> mapOffset = default(Offset<Map>),
        Offset<Vector2> positionOffset = default(Offset<Vector2>),
        int direction = 0,
        VectorOffset portalsOffset = default(VectorOffset)) {
      builder.StartTable(5);
      Enter.AddPortals(builder, portalsOffset);
      Enter.AddDirection(builder, direction);
      Enter.AddPosition(builder, positionOffset);
      Enter.AddMap(builder, mapOffset);
      Enter.AddCharacter(builder, characterOffset);
      return Enter.EndEnter(builder);
    }
  
    public static void StartEnter(FlatBufferBuilder builder) { builder.StartTable(5); }
    public static void AddCharacter(FlatBufferBuilder builder, Offset<Character> characterOffset) { builder.AddOffset(0, characterOffset.Value, 0); }
    public static void AddMap(FlatBufferBuilder builder, Offset<Map> mapOffset) { builder.AddOffset(1, mapOffset.Value, 0); }
    public static void AddPosition(FlatBufferBuilder builder, Offset<Vector2> positionOffset) { builder.AddOffset(2, positionOffset.Value, 0); }
    public static void AddDirection(FlatBufferBuilder builder, int direction) { builder.AddInt(3, direction, 0); }
    public static void AddPortals(FlatBufferBuilder builder, VectorOffset portalsOffset) { builder.AddOffset(4, portalsOffset.Value, 0); }
    public static VectorOffset CreatePortalsVector(FlatBufferBuilder builder, Offset<Portal>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
    public static VectorOffset CreatePortalsVectorBlock(FlatBufferBuilder builder, Offset<Portal>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
    public static void StartPortalsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
    public static Offset<Enter> EndEnter(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Enter>(o);
    }
  
    public struct Model
    {
      public FlatBuffers.Protocol.Response.Character.Model Character { get; set; }
      public FlatBuffers.Protocol.Response.Map.Model Map { get; set; }
      public FlatBuffers.Protocol.Response.Vector2.Model Position { get; set; }
      public int Direction { get; set; }
      public List<FlatBuffers.Protocol.Response.Portal.Model> Portals { get; set; }
    
      public Model(FlatBuffers.Protocol.Response.Character.Model character, FlatBuffers.Protocol.Response.Map.Model map, FlatBuffers.Protocol.Response.Vector2.Model position, int direction, List<FlatBuffers.Protocol.Response.Portal.Model> portals)
      {
        Character = character;
        Map = map;
        Position = position;
        Direction = direction;
        Portals = portals;
      }
    }
  
    public static byte[] Bytes(FlatBuffers.Protocol.Response.Character.Model character, FlatBuffers.Protocol.Response.Map.Model map, FlatBuffers.Protocol.Response.Vector2.Model position, int direction, List<FlatBuffers.Protocol.Response.Portal.Model> portals) {
      var builder = new FlatBufferBuilder(512);
      var characterOffset = FlatBuffers.Protocol.Response.Character.CreateCharacter(builder, character.Sequence, builder.CreateString(character.Name), FlatBuffers.Protocol.Response.Vector2.CreateVector2(builder, character.Position.X, character.Position.Y), character.Moving, character.Direction, FlatBuffers.Protocol.Response.Character.CreateEquipmentVector(builder, character.Equipment.Select(x => FlatBuffers.Protocol.Response.Equipment.CreateEquipment(builder, x.Id, builder.CreateString(x.Name), x.Type)).ToArray()));
      var mapOffset = FlatBuffers.Protocol.Response.Map.CreateMap(builder, builder.CreateString(map.Name));
      var positionOffset = FlatBuffers.Protocol.Response.Vector2.CreateVector2(builder, position.X, position.Y);
      var portalsOffset = FlatBuffers.Protocol.Response.Enter.CreatePortalsVector(builder, portals.Select(x => FlatBuffers.Protocol.Response.Portal.CreatePortal(builder, FlatBuffers.Protocol.Response.Vector2.CreateVector2(builder, x.Position.X, x.Position.Y), builder.CreateString(x.Map))).ToArray());
      var offset = Enter.CreateEnter(builder, characterOffset, mapOffset, positionOffset, direction, portalsOffset);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Enter).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Enter).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Character, model.Map, model.Position, model.Direction, model.Portals);
    }
  };
}