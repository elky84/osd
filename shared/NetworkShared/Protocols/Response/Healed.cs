// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct Healed : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Healed GetRootAsHealed(ByteBuffer _bb) { return GetRootAsHealed(_bb, new Healed()); }
    public static Healed GetRootAsHealed(ByteBuffer _bb, Healed obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Healed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public int Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public int Heal { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  
    public static Offset<Healed> CreateHealed(FlatBufferBuilder builder,
        int sequence = 0,
        int heal = 0) {
      builder.StartTable(2);
      Healed.AddHeal(builder, heal);
      Healed.AddSequence(builder, sequence);
      return Healed.EndHealed(builder);
    }
  
    public static void StartHealed(FlatBufferBuilder builder) { builder.StartTable(2); }
    public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(0, sequence, 0); }
    public static void AddHeal(FlatBufferBuilder builder, int heal) { builder.AddInt(1, heal, 0); }
    public static Offset<Healed> EndHealed(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Healed>(o);
    }
  
    public struct Model
    {
      public int Sequence { get; set; }
      public int Heal { get; set; }
    
      public Model(int sequence, int heal)
      {
        Sequence = sequence;
        Heal = heal;
      }
    }
  
    public static byte[] Bytes(int sequence, int heal) {
      var builder = new FlatBufferBuilder(512);
    
      var offset = Healed.CreateHealed(builder, sequence, heal);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(Healed).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(Healed).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Sequence, model.Heal);
    }
  };
}