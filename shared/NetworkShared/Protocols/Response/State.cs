// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol.Response
{
  public struct State : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static State GetRootAsState(ByteBuffer _bb) { return GetRootAsState(_bb, new State()); }
    public static State GetRootAsState(ByteBuffer _bb, State obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public State __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public int Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public Vector2? Position { get { int o = __p.__offset(6); return o != 0 ? (Vector2?)(new Vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public Vector2? Velocity { get { int o = __p.__offset(8); return o != 0 ? (Vector2?)(new Vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public int Direction { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public bool Jumping { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  
    public static Offset<State> CreateState(FlatBufferBuilder builder,
        int sequence = 0,
        Offset<Vector2> positionOffset = default(Offset<Vector2>),
        Offset<Vector2> velocityOffset = default(Offset<Vector2>),
        int direction = 0,
        bool jumping = false) {
      builder.StartTable(5);
      State.AddDirection(builder, direction);
      State.AddVelocity(builder, velocityOffset);
      State.AddPosition(builder, positionOffset);
      State.AddSequence(builder, sequence);
      State.AddJumping(builder, jumping);
      return State.EndState(builder);
    }
  
    public static void StartState(FlatBufferBuilder builder) { builder.StartTable(5); }
    public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(0, sequence, 0); }
    public static void AddPosition(FlatBufferBuilder builder, Offset<Vector2> positionOffset) { builder.AddOffset(1, positionOffset.Value, 0); }
    public static void AddVelocity(FlatBufferBuilder builder, Offset<Vector2> velocityOffset) { builder.AddOffset(2, velocityOffset.Value, 0); }
    public static void AddDirection(FlatBufferBuilder builder, int direction) { builder.AddInt(3, direction, 0); }
    public static void AddJumping(FlatBufferBuilder builder, bool jumping) { builder.AddBool(4, jumping, false); }
    public static Offset<State> EndState(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<State>(o);
    }
  
    public struct Model
    {
      public int Sequence { get; set; }
      public FlatBuffers.Protocol.Response.Vector2.Model Position { get; set; }
      public FlatBuffers.Protocol.Response.Vector2.Model Velocity { get; set; }
      public int Direction { get; set; }
      public bool Jumping { get; set; }
    
      public Model(int sequence, FlatBuffers.Protocol.Response.Vector2.Model position, FlatBuffers.Protocol.Response.Vector2.Model velocity, int direction, bool jumping)
      {
        Sequence = sequence;
        Position = position;
        Velocity = velocity;
        Direction = direction;
        Jumping = jumping;
      }
    }
  
    public static byte[] Bytes(int sequence, FlatBuffers.Protocol.Response.Vector2.Model position, FlatBuffers.Protocol.Response.Vector2.Model velocity, int direction, bool jumping) {
      var builder = new FlatBufferBuilder(512);
      var positionOffset = FlatBuffers.Protocol.Response.Vector2.CreateVector2(builder, position.X, position.Y);
      var velocityOffset = FlatBuffers.Protocol.Response.Vector2.CreateVector2(builder, velocity.X, velocity.Y);
      var offset = State.CreateState(builder, sequence, positionOffset, velocityOffset, direction, jumping);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(typeof(State).FullName.Length));
          writer.Write(Encoding.Default.GetBytes(typeof(State).FullName));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
    
    public static byte[] Bytes(Model model) {
      return Bytes(model.Sequence, model.Position, model.Velocity, model.Direction, model.Jumping);
    }
  };
}