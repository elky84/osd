// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using System.Linq;

namespace FlatBuffers.Protocol
{
  public struct Object : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static Object GetRootAsObject(ByteBuffer _bb) { return GetRootAsObject(_bb, new Object()); }
    public static Object GetRootAsObject(ByteBuffer _bb, Object obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public Object __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public int Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public Position? Position { get { int o = __p.__offset(6); return o != 0 ? (Position?)(new Position()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  
    public static Offset<Object> CreateObject(FlatBufferBuilder builder,
        int sequence = 0,
        Offset<Position> positionOffset = default(Offset<Position>)) {
      builder.StartTable(2);
      Object.AddPosition(builder, positionOffset);
      Object.AddSequence(builder, sequence);
      return Object.EndObject(builder);
    }
  
    public static void StartObject(FlatBufferBuilder builder) { builder.StartTable(2); }
    public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(0, sequence, 0); }
    public static void AddPosition(FlatBufferBuilder builder, Offset<Position> positionOffset) { builder.AddOffset(1, positionOffset.Value, 0); }
    public static Offset<Object> EndObject(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<Object>(o);
    }
  
    public struct Model
    {
      public int Sequence { get; set; }
      public FlatBuffers.Protocol.Position.Model Position { get; set; }
    
      public Model(int sequence, FlatBuffers.Protocol.Position.Model position)
      {
        Sequence = sequence;
        Position = position;
      }
    }
  
    public static byte[] Bytes(int sequence, FlatBuffers.Protocol.Position.Model position) {
      var builder = new FlatBufferBuilder(512);
      var positionOffset = FlatBuffers.Protocol.Position.CreatePosition(builder, position.X, position.Y);
      var offset = Object.CreateObject(builder, sequence, positionOffset);
      builder.Finish(offset.Value);
      return builder.DataBuffer.ToSizedArray();
    }
  };
}