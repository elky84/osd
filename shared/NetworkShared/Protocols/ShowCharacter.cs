// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;
using global::System.Linq;
using global::System.IO;
using global::System.Text;

namespace FlatBuffers.Protocol
{
  public struct ShowCharacter : IFlatbufferObject
  {
    private Table __p;
    public ByteBuffer ByteBuffer { get { return __p.bb; } }
    public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
    public static ShowCharacter GetRootAsShowCharacter(ByteBuffer _bb) { return GetRootAsShowCharacter(_bb, new ShowCharacter()); }
    public static ShowCharacter GetRootAsShowCharacter(ByteBuffer _bb, ShowCharacter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
    public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
    public ShowCharacter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }
  
    public int Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
    public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  #if ENABLE_SPAN_T
    public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
  #else
    public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  #endif
    public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
    public Position? Position { get { int o = __p.__offset(8); return o != 0 ? (Position?)(new Position()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
    public Equipment? Equipment { get { int o = __p.__offset(10); return o != 0 ? (Equipment?)(new Equipment()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  
    public static Offset<ShowCharacter> CreateShowCharacter(FlatBufferBuilder builder,
        int sequence = 0,
        StringOffset nameOffset = default(StringOffset),
        Offset<Position> positionOffset = default(Offset<Position>),
        Offset<Equipment> equipmentOffset = default(Offset<Equipment>)) {
      builder.StartTable(4);
      ShowCharacter.AddEquipment(builder, equipmentOffset);
      ShowCharacter.AddPosition(builder, positionOffset);
      ShowCharacter.AddName(builder, nameOffset);
      ShowCharacter.AddSequence(builder, sequence);
      return ShowCharacter.EndShowCharacter(builder);
    }
  
    public static void StartShowCharacter(FlatBufferBuilder builder) { builder.StartTable(4); }
    public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(0, sequence, 0); }
    public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
    public static void AddPosition(FlatBufferBuilder builder, Offset<Position> positionOffset) { builder.AddOffset(2, positionOffset.Value, 0); }
    public static void AddEquipment(FlatBufferBuilder builder, Offset<Equipment> equipmentOffset) { builder.AddOffset(3, equipmentOffset.Value, 0); }
    public static Offset<ShowCharacter> EndShowCharacter(FlatBufferBuilder builder) {
      int o = builder.EndTable();
      return new Offset<ShowCharacter>(o);
    }
  
    public struct Model
    {
      public int Sequence { get; set; }
      public string Name { get; set; }
      public FlatBuffers.Protocol.Position.Model Position { get; set; }
      public FlatBuffers.Protocol.Equipment.Model Equipment { get; set; }
    
      public Model(int sequence, string name, FlatBuffers.Protocol.Position.Model position, FlatBuffers.Protocol.Equipment.Model equipment)
      {
        Sequence = sequence;
        Name = name;
        Position = position;
        Equipment = equipment;
      }
    }
  
    public static byte[] Bytes(int sequence, string name, FlatBuffers.Protocol.Position.Model position, FlatBuffers.Protocol.Equipment.Model equipment) {
      var builder = new FlatBufferBuilder(512);
      var nameOffset = builder.CreateString(name);
      var positionOffset = FlatBuffers.Protocol.Position.CreatePosition(builder, position.X, position.Y);
      var equipmentOffset = FlatBuffers.Protocol.Equipment.CreateEquipment(builder, equipment.Sequence, builder.CreateString(equipment.Weapon), builder.CreateString(equipment.Armor), builder.CreateString(equipment.Shoes), builder.CreateString(equipment.Helmet), builder.CreateString(equipment.Shield));
      var offset = ShowCharacter.CreateShowCharacter(builder, sequence, nameOffset, positionOffset, equipmentOffset);
      builder.Finish(offset.Value);
      
      var bytes = builder.DataBuffer.ToSizedArray();
      using (var mstream = new MemoryStream())
      {
        using (var writer = new BinaryWriter(mstream))
        {
          writer.Write(BitConverter.ToInt32(BitConverter.GetBytes(bytes.Length).Reverse().ToArray(), 0));
          writer.Write((byte)(nameof(ShowCharacter).Length));
          writer.Write(Encoding.Default.GetBytes(nameof(ShowCharacter)));
          writer.Write(bytes);
          writer.Flush();
          return mstream.ToArray();
        }
      }
    }
  };
}